plugins {
	id 'java'
	id "de.undercouch.download" version "4.0.2"
}

defaultTasks 'compileJava', 'wiki'

def fitnesseVersion = '20191110'

dependencies {
	//TODO should be runtimeOnly but this breaks writeFitNesseClasspath
	runtime files("libs/fitnesse-standalone-${fitnesseVersion}.jar")
	implementation "org.fitnesse:fitnesse:${fitnesseVersion}"

	testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.5.2")

	testImplementation 'junit:junit:4.12'

	//TODO should be implementation but this breaks wiki
	compile project(':myapp')
}

task downloadFitnesse(type: Download) {
	src "http://docs.fitnesse.org/fitnesse-standalone.jar?responder=releaseDownload&release=${fitnesseVersion}"
	dest "libs/fitnesse-standalone-${fitnesseVersion}.jar"
	overwrite false
 }


// inspired by https://github.com/amolenaar/gradle-fitnesse-classpath-builder

task writeFitNesseClasspath(type: WriteFitNesseClasspath) {
	classpath = configurations.runtime
	pagePath = project.file("fitnesse/FitNesseRoot/MyApp/content.txt")
}

clean.dependsOn(cleanWriteFitNesseClasspath)

test {
	dependsOn compileJava, writeFitNesseClasspath
	inputs.dir("fitnesse/FitNesseRoot/MyApp")

	doLast {

		//TODO should look in fitnesse/results/*.html
		def file = project.file("fitnesse/results/MyApp.html")
		def fitnesseResult = file.text;

		if (fitnesseResult.contains('<tr class="fail">') || fitnesseResult.contains('<tr class="error">'))
			throw new GradleException("Fitnesse failed!! check $file")
	}
}

task wiki(type: JavaExec) {
	dependsOn writeFitNesseClasspath
	dependsOn compileJava
	classpath configurations.runtime
	main "fitnesseMain.FitNesseMain"
	args "-e", "0", "-p", "9000", "-d", "fitnesse"
}

wiki.dependsOn downloadFitnesse

/// === Custom Tasks
class WriteFitNesseClasspath extends DefaultTask {
	@Input
	def classpath

	@OutputFile
	File pagePath

	@TaskAction
	def generatePage() {
		def contentTxt = pagePath
		contentTxt.createNewFile()
		contentTxt.withWriter { writer ->
			writer.writeLine("!*****> imports") //hide

			writer.writeLine("!define TEST_SYSTEM {slim}")

			//TODO this needs some cleanup:
			project.sourceSets.main.output.classesDirs.each { d ->
				writer.writeLine("!path $d")
			}
			//TODO this needs some cleanup:
			classpath.each { d ->
				writer.writeLine("!path $d")
			}

			writer.writeLine("*!") //end hide
			writer.writeLine("!contents -R2 -g -p -f -h")
		}
	}
}
